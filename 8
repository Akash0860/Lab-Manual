#import numpy as np
import pandas as pd
# Importing the dataset
dataset = pd.read_csv('iris.csv')
#dataset.groupby('species').size()
#Dividing data into features and labels
feature_columns = ['sepal_length', 'sepal_width', 'petal_length','petal_width']
X = dataset[feature_columns].values
y = dataset['species'].values
"""
KNeighborsClassifier does not accept string labels. 
We need to use LabelEncoder to transform them into numbers. 
Iris-setosa correspond to 0, 
Iris-versicolor correspond to 1 and 
Iris-virginica correspond to 2.
"""
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)
#Spliting dataset into training set and test set
from sklearn.cross_validation import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)
# Fitting K-NN to the Training set
from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors = 3)
# Fitting the model
classifier.fit(X_train, y_train)
# Predicting the Test set results
y_pred = classifier.predict(X_test)
print("y_pred y_test")
for i in range(len(y_pred)):
 print(y_pred[i], " ", y_test[i])
# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(cm)
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_pred)*100
print('Accuracy of our model is equal ' + str(round(accuracy, 2)) + ' %.')
Input csv file:
iris_data.csv
Output:
y_pred y_test
2 2
1 1
0 0
2 2
0 0
2 2
0 0
1 1
1 1
1 1
2 2
1 1
1 1
1 1
2 1
0 0
1 1
1 1
0 0
0 0
2 2
1 1
0 0
0 0
2 2
0 0
0 0
1 1
1 1
0 0
Confusion Matrix:
[[11 0 0]
[ 0 12 1]
[ 0 0 6]]
Accuracy of our model is equal 96.67 %.
